name: Deploy Magento to GCP VM

on:
  push:
    branches:
      - master # Hoặc main, tùy theo nhánh chính của bạn

env:
  GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  GCP_ARTIFACT_REGISTRY_LOCATION: ${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }} # Ví dụ: asia-southeast1
  GCP_ARTIFACT_REGISTRY: ${{ secrets.GCP_ARTIFACT_REGISTRY_LOCATION }}-docker.pkg.dev
  GCP_IMAGE_REPO: ${{ secrets.GCP_ARTIFACT_REGISTRY_REPO }} # Tên repository trong Artifact Registry
  IMAGE_APP_NAME: magento-app
  IMAGE_ES_NAME: magento-elasticsearch
  # VM details
  VM_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  VM_ZONE: ${{ secrets.VM_ZONE }}
  VM_INSTANCE_NAME: ${{ secrets.VM_INSTANCE_NAME }}
  VM_USER: ${{ secrets.VM_USER }}
  VM_PROJECT_DIR: /home/${{ secrets.VM_USER }}/magento-app

jobs:
  build-and-push-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    # Permissions có thể không cần id-token: 'write' nếu không dùng google-github-actions/auth để lấy access_token
    permissions:
      contents: 'read'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Bước 'Authenticate to Google Cloud' vẫn có thể hữu ích để thiết lập các biến môi trường gcloud
      # và xác thực cho các công cụ gcloud khác nếu bạn dùng sau này,
      # nhưng không bắt buộc cho việc docker login nếu dùng _json_key.
      - name: Authenticate to Google Cloud (optional for _json_key login, good for gcloud CLI)
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Google Artifact Registry using _json_key
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GCP_ARTIFACT_REGISTRY }}
          username: _json_key # <--- SỬ DỤNG _json_key
          password: ${{ secrets.GCP_SA_KEY }} # <--- SỬ DỤNG TRỰC TIẾP SERVICE ACCOUNT KEY

      - name: Build and push App image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/php7.4-fpm
          push: true
          tags: |
            ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_REPO }}/${{ env.IMAGE_APP_NAME }}:latest
            ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_REPO }}/${{ env.IMAGE_APP_NAME }}:${{ github.sha }}

      - name: Build and push Elasticsearch image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/elasticsearch
          push: true
          tags: |
            ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_REPO }}/${{ env.IMAGE_ES_NAME }}:latest
            ${{ env.GCP_ARTIFACT_REGISTRY }}/${{ env.GCP_PROJECT_ID }}/${{ env.GCP_IMAGE_REPO }}/${{ env.IMAGE_ES_NAME }}:${{ github.sha }}

  deploy-to-vm:
    name: Deploy to VM
    needs: build-and-push-images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.VM_SSH_PRIVATE_KEY }}

      - name: Create .env file on VM and Sync project files
        env:
          MYSQL_ROOT_PASSWORD_SECRET: ${{ secrets.MYSQL_ROOT_PASSWORD_SECRET }}
          MYSQL_USER_SECRET: ${{ secrets.MYSQL_USER_SECRET }}
          MYSQL_DATABASE_SECRET: ${{ secrets.MYSQL_DATABASE_SECRET }}
          MYSQL_PASSWORD_SECRET: ${{ secrets.MYSQL_PASSWORD_SECRET }}
        run: |
          echo "Creating directories on VM..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${{ env.VM_USER }}@${{ env.VM_INSTANCE_NAME }}.${{ env.VM_ZONE }}.${{ env.VM_PROJECT_ID }} \
            "mkdir -p ${{ env.VM_PROJECT_DIR }}/config/nginx ${{ env.VM_PROJECT_DIR }}/data/mysql ${{ env.VM_PROJECT_DIR }}/data/elasticsearch"

          echo "Creating .env file on VM..."
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${{ env.VM_USER }}@${{ env.VM_INSTANCE_NAME }}.${{ env.VM_ZONE }}.${{ env.VM_PROJECT_ID }} \
            "cat <<EOF > ${{ env.VM_PROJECT_DIR }}/.env
          MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD_SECRET}
          MYSQL_USER=${MYSQL_USER_SECRET}
          MYSQL_DATABASE=${MYSQL_DATABASE_SECRET}
          MYSQL_PASSWORD=${MYSQL_PASSWORD_SECRET}
          IMAGE_APP_TAG=${{ github.sha }}
          IMAGE_ES_TAG=${{ github.sha }}
          GCP_ARTIFACT_REGISTRY=${{ env.GCP_ARTIFACT_REGISTRY }}
          GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}
          GCP_IMAGE_REPO=${{ env.GCP_IMAGE_REPO }}
          IMAGE_APP_NAME=${{ env.IMAGE_APP_NAME }}
          IMAGE_ES_NAME=${{ env.IMAGE_ES_NAME }}
          GCP_ARTIFACT_REGISTRY_LOCATION=${{ env.GCP_ARTIFACT_REGISTRY_LOCATION }}
          EOF"

          echo "Syncing project files to VM..."
          rsync -avz -e "ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \
            --exclude='.git/' \
            --exclude='.github/' \
            --exclude='data/' \
            --exclude='README.md' \
            --exclude='*.json' \
            ./ ${{ env.VM_USER }}@${{ env.VM_INSTANCE_NAME }}.${{ env.VM_ZONE }}.${{ env.VM_PROJECT_ID }}:${{ env.VM_PROJECT_DIR }}/

      - name: Deploy application on VM
        run: |
          echo "Deploying application on VM: ${{ env.VM_INSTANCE_NAME }}"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
            ${{ env.VM_USER }}@${{ env.VM_INSTANCE_NAME }}.${{ env.VM_ZONE }}.${{ env.VM_PROJECT_ID }} << 'EOFSSH'
            set -e
            echo "Changing to project directory: ${{ env.VM_PROJECT_DIR }}"
            cd ${{ env.VM_PROJECT_DIR }}

            echo "Sourcing .env file..."
            if [ -f .env ]; then
              export $(grep -v '^#' .env | xargs)
            else
              echo "Error: .env file not found!"
              exit 1
            fi

            # Login Docker trên VM để pull từ Artifact Registry
            # Cần gcloud CLI đã cài đặt trên VM
            echo "Logging in to Artifact Registry on VM..."
            gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://${GCP_ARTIFACT_REGISTRY_LOCATION}-docker.pkg.dev
            # Lưu ý: Service account của VM (thường là Compute Engine default service account)
            # cần có quyền "Artifact Registry Reader" (roles/artifactregistry.reader)

            echo "Pulling latest images: app:${IMAGE_APP_TAG}, es:${IMAGE_ES_TAG}"
            docker compose -f docker-compose.yml pull

            echo "Stopping and removing old containers (if any)..."
            docker compose -f docker-compose.yml down --remove-orphans || true

            echo "Starting new containers..."
            docker compose -f docker-compose.yml up -d

            echo "Waiting for services to be healthy..."
            sleep 30

            echo "Running Magento post-deploy commands..."
            docker compose exec -T app php bin/magento maintenance:enable || echo "Failed to enable maintenance mode, continuing..."
            docker compose exec -T app php bin/magento setup:upgrade
            docker compose exec -T app php bin/magento setup:di:compile
            docker compose exec -T app php bin/magento setup:static-content:deploy -f # en_US vi_VN
            docker compose exec -T app php bin/magento cache:clean
            docker compose exec -T app php bin/magento cache:flush
            docker compose exec -T app php bin/magento indexer:reindex || echo "Indexer reindex might have non-critical errors, continuing..."
            docker compose exec -T app php bin/magento maintenance:disable || echo "Failed to disable maintenance mode."

            echo "Deployment finished!"
          EOFSSH





